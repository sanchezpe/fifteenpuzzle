/** * Pablo Sanchez * Description: Implementation of a 15-puzzle * Features: 15 puzzle pieces, an empty square, and a button to shuffle the puzzle */'use strict';//global variables//All the pieces of the puzzlevar puzzlePieces;//Do NOT do that. It will give error. .getElementsByTagName must be inside a function//puzzlePieces = document.getElementById("puzzlearea").getElementsByTagName("div");//piece sizevar puzzlePieceLength = 100;//keep track of empty squarevar emptySquare;//total number of rowsvar puzzleGridRows = 4;/** * Main function. Defines the puzzle behaviour when the page is loaded. */window.onload = function () {    //store puzzle pieces into an array    puzzlePieces = document.getElementById("puzzlearea").getElementsByTagName("div");    //the empty square is the last element of the grid    emptySquare = puzzlePieces.length;    //for each puzzle piece    for (var i = 0; i < puzzlePieces.length; i++) {        //defines a class "puzzlePiece" for the puzzle pieces        //CSS should have style for this class        puzzlePieces[i].className = "puzzlePiece";        //assign an id to each piece.        //puzzlePiece.id = squareNumberOnPuzzleGrid        puzzlePieces[i].id = i;        //row = parseInt(elementNo % totalNumOfRows)        var xPosPuzzlePiece = puzzlePieceLength * parseInt(i % 4);        //col = parseInt(elementNo / totalNumOfRows)        var yPosPuzzlePiece = puzzlePieceLength * parseInt(i / 4);        //set up piece position        puzzlePieces[i].style.left = xPosPuzzlePiece + "px";        puzzlePieces[i].style.top = yPosPuzzlePiece + "px";        //set background image position for each piece        puzzlePieces[i].style.backgroundPosition = "-" + xPosPuzzlePiece + "px " + "-" + yPosPuzzlePiece + "px";        //set action on mouse over puzzle piece        puzzlePieces[i].onmouseover = hoverOn;        //set action on mouse outside puzzle piece        puzzlePieces[i].onmouseout = hoverOff;        //move puzzle piece on click        puzzlePieces[i].onclick = movePuzzlePiece;    }    //shuffle puzzle on button click    document.getElementById("shufflebutton").onclick = shufflePuzzle;};/** * Change color of a puzzle piece when it can be moved. */function hoverOn() {    if (canMovePuzzlePiece(this.id)) {        this.style.color = "red";        this.style.borderColor = "red";    }}/** * Return color of a puzzle piece back to normal. */function hoverOff() {    this.style.color = "black";    this.style.borderColor = "black";}/** * Determines if a puzzle piece can be moved. * @param puzzlePieceIdNum * @returns {boolean} */function canMovePuzzlePiece(puzzlePieceIdNum) {    //puzzlePiece.id is a String. It needs to be an to perform calculations    var puzzlePiece = parseInt(puzzlePieceIdNum);    //check if puzzle piece is out of range    if (puzzlePiece > 15 || puzzlePiece < 0) {        return false;    }    //check if puzzle piece can move up    if ((puzzlePiece - puzzleGridRows) == emptySquare) {        return true;    }    //check if puzzle piece can move down    if ((puzzlePiece + puzzleGridRows) == emptySquare) {        return true;    }    //check if puzzle piece can move left    if (((puzzlePiece - 1) == emptySquare) &&        //AND if puzzle piece is not on a different row        (puzzlePiece % puzzleGridRows != 0)) {        return true;    }    //check if puzzle piece can move right    if (((puzzlePiece + 1) == emptySquare) &&        //AND if puzzle piece is not on a different row        ((puzzlePiece + 1) % puzzleGridRows != 0)) {        return true;    } else {        return false;    }}/** * Move puzzle piece to adjacent empty space. */function movePuzzlePiece() {    if (canMovePuzzlePiece(this.id)) {        //determine row and column of the puzzle piece        var xPosPuzzlePiece = puzzlePieceLength * parseInt(emptySquare % 4);        var yPosPuzzlePiece = puzzlePieceLength * parseInt(emptySquare / 4);        //assign new position        this.style.left = xPosPuzzlePiece + "px";        this.style.top = yPosPuzzlePiece + "px";        //exchange value of the empty square and the puzzle piece        //old value of empty square        var tempEmpty = emptySquare; // temp spot for new spot        //new value of empty square (previous value of puzzle piece)        //puzzlePiece.id is a String. It needs to be an to perform calculations        emptySquare = parseInt(this.id);        //new value of puzzle piece (previous value of empty square)        this.id = tempEmpty;    }}/** * Shuffles the 15-puzzle. */function shufflePuzzle() {    //repeat process 500 times    for (var i = 0; i < 500; i++) {        //store pieces that can be moved into an array        var moveablePuzzlePieces = [];        //keep track of pieces that have been moved into array        var count = 0;        //check if puzzle piece can move up        var upPuzzlePiece = emptySquare - 4;        if (canMovePuzzlePiece(upPuzzlePiece)) {            moveablePuzzlePieces.push(upPuzzlePiece);            count++;        }        //check if puzzle piece can move down        var downPuzzlePiece = emptySquare + 4;        if (canMovePuzzlePiece(downPuzzlePiece)) {            moveablePuzzlePieces.push(downPuzzlePiece);            count++;        }        //check if puzzle piece can move left        var leftPuzzlePiece = emptySquare - 1;        if (canMovePuzzlePiece(leftPuzzlePiece)) {            moveablePuzzlePieces.push(leftPuzzlePiece);            count++;        }        //check if puzzle piece can move left        var rightPuzzlePiece = emptySquare + 1;        if (canMovePuzzlePiece(rightPuzzlePiece)) {            moveablePuzzlePieces.push(rightPuzzlePiece);            count++;        }        //select one puzzle piece at random from the array        var puzzlePieceRandom = moveablePuzzlePieces[parseInt(Math.random() * count)];        //int must be passed as a string        //get element that matches id num of random puzzle piece and move it        document.getElementById("" + puzzlePieceRandom).click();    }}